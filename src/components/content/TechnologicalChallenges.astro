---
---

<div class="mb-8">
  <h3
    class="font-bold text-text-heading text-2xl md:text-3xl pt-4 pb-2 w-fit overflow-hidden"
    data-annotate="underline"
  >
    Technological challenges
  </h3>
  <ul class="mt-5 unset md:flex md:flex-wrap">
    <li class="p-3 basis-1/3">
      <img
        src="images/differences/stackCombinations.svg"
        typeof="foaf:Image"
        class="mb-5"
      />
      <div class="md:flex md:items-start">
        <div class="pl-2">
          <strong>Technology stack combinations</strong>
          <p>
            Seeing the same app implemented with different JavaScript frameworks
            was the fascinating core of TodoMVC. Here we zoom out one level and
            compare how micro frontends built with different tech-stacks can be
            integrated.
          </p>
        </div>
      </div>
    </li>
    <li class="p-3 basis-1/3">
      <img
        src="images/differences/shell.svg"
        typeof="foaf:Image"
        class="mb-5"
      />
      <div class="md:flex md:items-start">
        <div class="pl-2">
          <strong>Shell or no shell</strong>
          <p>
            Having a central application shell is a popular pattern, but it's
            not a requirement for building a micro frontends applications.
            Building a decentralized setup of self-contained systems that adhere
            to a set of rules is as valid as a meta-framework based solution.
          </p>
        </div>
      </div>
    </li>
    <li class="p-3 basis-1/3">
      <img
        src="images/differences/rendering.svg"
        typeof="foaf:Image"
        class="mb-5"
      />
      <div class="md:flex md:items-start">
        <div class="pl-2">
          <strong>Server or client rendered</strong>
          <p>
            If you render your application on the server, the client or both has
            a huge impact on your architecture and the required integration
            techniques.
          </p>
        </div>
      </div>
    </li>
    <li class="p-3 basis-1/3">
      <img
        src="images/differences/communication.svg"
        typeof="foaf:Image"
        class="mb-5"
      />
      <div class="md:flex md:items-start">
        <div class="pl-2">
          <strong>Communication patterns</strong>
          <p>
            Browser events, event-bus, URL parameter, shared state, via server
            or through your application shell? There are many ways to implement
            inter-team communication across micro frontends.
          </p>
        </div>
      </div>
    </li>
    <li class="p-3 basis-1/3">
      <img
        src="images/differences/deployment.svg"
        typeof="foaf:Image"
        class="mb-5"
      />
      <div class="md:flex md:items-start">
        <div class="pl-2">
          <strong>Deployment technique</strong>
          <p>
            The tractor store example is designed in a way that it can be
            deployed in a containerized, serverless or static way. There are
            also specialized micro frontend hosting platforms that solve
            specific architecture-related problems. Being able to compare
            different deployment variants for the same application is a valuable
            resource.
          </p>
        </div>
      </div>
    </li>
    <li class="p-3 basis-1/3">
      <img
        src="images/differences/shared.svg"
        typeof="foaf:Image"
        class="mb-5"
      />
      <div class="md:flex md:items-start">
        <div class="pl-2">
          <strong>Bonus: Shared UI components</strong>
          <p>
            The tractor store example can also be used to verify how a common
            design system can be implemented. In many projects, this is a core
            challenge when migrating to a micro frontends architecture. The
            "button" component is a suitable first candidate to unify.
          </p>
        </div>
      </div>
    </li>
  </ul>
</div>
